// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("BNSX_DB_URL")
}

model PrintEvent {
  // id                  Int     @id @default(autoincrement())
  stacksApiId         Int
  contractId          String
  value               Json
  hex                 Bytes
  topic               String
  txid                Bytes
  eventIndex          Int
  txIndex             Int
  blockHeight         Int
  indexBlockHash      Bytes
  microblockHash      Bytes
  microblockCanonical Boolean
  canonical           Boolean
  microblockSequence  Int

  @@id([blockHeight, microblockSequence, txIndex, eventIndex])
  @@index([blockHeight(sort: Desc), microblockSequence(sort: Desc), txIndex(sort: Desc), eventIndex(sort: Desc)])
}

model InscriptionZonefiles {
  inscriptionId          String  @id
  name                   String
  namespace              String
  inscriptionContent     String
  inscriptionContentType String
  stxAddress             String?
  btcAddress             String?
  inscriptionOwner       String
  sat                    String
  output                 String
  location               String
  zonefileRaw            String
  timestamp              BigInt
  genesisHeight          Int
  outputValue            Int
  genesisTransaction     String
}

view Name {
  id             BigInt          @id @unique
  name           String
  namespace      String
  NameOwnership  NameOwnership[]
  PrimaryName    PrimaryName[]
  InscribedNames InscribedNames?

  @@unique([name, namespace])
  @@map("names")
}

view PrimaryName {
  primaryId BigInt @id @map("primary_id")
  account   String @unique
  name      Name?  @relation(fields: [primaryId], references: [id])

  @@map("primary_names")
}

view NameOwnership {
  id      BigInt @id @unique
  account String
  name    Name?  @relation(fields: [id], references: [id])

  @@map("name_ownership")
}

view InscribedNames {
  id             BigInt @id @unique
  inscription_id String
  name           Name?  @relation(fields: [id], references: [id])
  blockHeight    Int    @map("block_height")
  txid           Bytes

  @@map("inscribed_names")
}

// OLD:

// model Name {
//   id           Int        @id @default(autoincrement())
//   nftId        Int        @unique
//   name         String     @db.VarChar(48)
//   namespace    String     @db.VarChar(20)
//   primaryOwner Account?   @relation("PrimaryName")
//   wrapper      Wrapper?
//   owner        NameOwner?
//   mintedAt     DateTime
//   // NameTransfer NameTransfer[]

//   @@unique([name, namespace])
// }

// model NameOwner {
//   // id             Int      @id @default(autoincrement())
//   name           Name?    @relation(fields: [nftId], references: [nftId])
//   nftId          Int      @unique
//   ownerPrincipal String
//   owner          Account? @relation(fields: [ownerPrincipal], references: [principal])

//   @@id(nftId)
// }

// // model NameTransfer {
// //   id Int @id @default(autoincrement())

// //   name   Name? @relation(fields: [nameId], references: [nftId])
// //   nameId Int

// //   sender   Account? @relation("Sender", fields: [senderId], references: [principal])
// //   senderId String

// //   recipient   Account? @relation("Recipient", fields: [recipientId], references: [principal])
// //   recipientId String

// //   txid String
// // }

// model Account {
//   id            Int         @id @default(autoincrement())
//   principal     String      @unique
//   primaryName   Name?       @relation("PrimaryName", fields: [primaryNameId], references: [nftId])
//   primaryNameId Int?        @unique
//   names         NameOwner[]
//   // sendTransfers      NameTransfer[] @relation("Sender")
//   // recipientTransfers NameTransfer[] @relation("Recipient")
// }

// model Wrapper {
//   id        Int    @id @default(autoincrement())
//   name      Name?  @relation(fields: [nameId], references: [nftId])
//   nameId    Int    @unique
//   principal String @unique
// }
